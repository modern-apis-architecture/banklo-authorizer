// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for TransactionDataRequestOperation.
const (
	Credit TransactionDataRequestOperation = "credit"
	Debit  TransactionDataRequestOperation = "debit"
)

// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
type CountryCode = string

// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
type CurrencyCode = string

// GenericError defines model for generic-error.
type GenericError struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
}

// Id defines model for id.
type Id = string

// RequestCancellation defines model for request-cancellation.
type RequestCancellation struct {
	AcquirerCode      string `json:"acquirer_code"`
	AuthorizationCode string `json:"authorization_code"`

	// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
	CountryCode CountryCode `json:"country_code"`

	// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode    CurrencyCode           `json:"currency_code"`
	MerchantCode    string                 `json:"merchant_code"`
	PosId           Id                     `json:"pos_id"`
	ProductId       Id                     `json:"product_id"`
	TransactionData TransactionDataRequest `json:"transaction_data"`
}

// RequestReversal defines model for request-reversal.
type RequestReversal struct {
	AcquirerCode      string `json:"acquirer_code"`
	AuthorizationCode string `json:"authorization_code"`

	// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
	CountryCode CountryCode `json:"country_code"`

	// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode    CurrencyCode           `json:"currency_code"`
	MerchantCode    *string                `json:"merchant_code,omitempty"`
	PosId           Id                     `json:"pos_id"`
	ProductId       Id                     `json:"product_id"`
	TransactionData TransactionDataRequest `json:"transaction_data"`
}

// RequestTransaction defines model for request-transaction.
type RequestTransaction struct {
	AcquirerCode      string `json:"acquirer_code"`
	AuthorizationCode string `json:"authorization_code"`

	// The country code from ISO 3166 find more at https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes
	CountryCode CountryCode `json:"country_code"`

	// The currency code from ISO 4217 find more at https://en.wikipedia.org/wiki/ISO_4217
	CurrencyCode    CurrencyCode           `json:"currency_code"`
	MerchantCode    string                 `json:"merchant_code"`
	PosId           Id                     `json:"pos_id"`
	ProductId       Id                     `json:"product_id"`
	TransactionData TransactionDataRequest `json:"transaction_data"`
}

// ResponseTransactions defines model for response-transactions.
type ResponseTransactions struct {
	RegisteredAt  *time.Time `json:"registered_at,omitempty"`
	TransactionId *string    `json:"transaction_id,omitempty"`
}

// TransactionDataRequest defines model for transaction-data-request.
type TransactionDataRequest struct {
	Amount        float32                         `json:"amount"`
	CardId        Id                              `json:"card_id"`
	Operation     TransactionDataRequestOperation `json:"operation"`
	TransactionId Id                              `json:"transaction_id"`
	WithPassword  *bool                           `json:"with_password,omitempty"`
}

// TransactionDataRequestOperation defines model for TransactionDataRequest.Operation.
type TransactionDataRequestOperation string

// N201Success defines model for 201-success.
type N201Success = ResponseTransactions

// N400BadRequest defines model for 400-bad-request.
type N400BadRequest = GenericError

// N401Unauthorized defines model for 401-unauthorized.
type N401Unauthorized = GenericError

// N403Forbidden defines model for 403-forbidden.
type N403Forbidden = GenericError

// N500Unavailable defines model for 500-unavailable.
type N500Unavailable = GenericError

// CreateTransactionJSONBody defines parameters for CreateTransaction.
type CreateTransactionJSONBody = RequestTransaction

// RequestCancellationJSONBody defines parameters for RequestCancellation.
type RequestCancellationJSONBody = RequestCancellation

// RequestReversalJSONBody defines parameters for RequestReversal.
type RequestReversalJSONBody = RequestReversal

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody = CreateTransactionJSONBody

// RequestCancellationJSONRequestBody defines body for RequestCancellation for application/json ContentType.
type RequestCancellationJSONRequestBody = RequestCancellationJSONBody

// RequestReversalJSONRequestBody defines body for RequestReversal for application/json ContentType.
type RequestReversalJSONRequestBody = RequestReversalJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /transactions)
	CreateTransaction(ctx echo.Context) error

	// (POST /transactions/{id}/cancellation)
	RequestCancellation(ctx echo.Context, id string) error

	// (POST /transactions/{id}/reversal)
	RequestReversal(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTransaction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTransaction(ctx)
	return err
}

// RequestCancellation converts echo context to params.
func (w *ServerInterfaceWrapper) RequestCancellation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestCancellation(ctx, id)
	return err
}

// RequestReversal converts echo context to params.
func (w *ServerInterfaceWrapper) RequestReversal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestReversal(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/transactions", wrapper.CreateTransaction)
	router.POST(baseURL+"/transactions/:id/cancellation", wrapper.RequestCancellation)
	router.POST(baseURL+"/transactions/:id/reversal", wrapper.RequestReversal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZ3W7bNhR+FY3r3cSY+rFk+y4thiJAgQ5pd9VlBkUexWwtUiXpppnhdx8oy7ZEK45b",
	"tLnYcidZ5/9835F4vEZMVbWSIK1BszXSYGolDTQ3MYmwWTEGprllSlqQ1l3Sul4KRq1QcvTRKOl+M2wB",
	"FXVXLzSUaIZ+HR1sj7ZPzWjnAFtNpaHMmTBos9mEiINhWtTuFzRDaBOilBBcUI41fF6BsT8siFuQoAXD",
	"oLXSDzuP8ErSlV0oLf4B/tTeE1wqXQjOQT6t6zEhLvEvVCxpsYSndL4JW1st4FbS6vs5U7yJoi/9fgFB",
	"KxE4iaDUqgqu3r0NkijLglJIHlRKQ0BtsLC2NrPRCOTFnfgkauCCXih9O3J3ozfC2Lkq51fv3s6d7rzr",
	"2PwlUYjgK61qVwt0ef0ahaiiX9+AvLULNEtCVAnZubP3tRM0Vgt56wrKVlqDZCcTaUW8TNI4yr8lE5eB",
	"0/Fi/v3P62+Nud+s2fpgzfXFpYEIiZDfwkY8qMAYegvOTq1VDdoKMAfN9bG7npWj55sQWWGbVPpx7QNX",
	"xUdg1lkSvBctSllBimwKGNKC4zQrM1yQKMITxsc85sk0SwuvOFm/OlmIamotaJfg3x8InlJc3qwnG7y/",
	"Ts+4juLNCzRQ6Xa4YUYlg+WS7mrQKThln1dCg24BhIo8y6d0QjBhJMZRBBxPclLiPMmmWRZPxgQoCtFu",
	"djUme7rTPO7rAiYFn5aUJxnJchR63EMvry/REZB3uALNFlTafnR00vMQERwlNCaEj6ckccCplZm7ZiEa",
	"x2Pgeerkk608BRLhLCEsomkRlwVDDZL4itmtTuOjGLO+jwyTIp+QKM2ziHFX7MNLZs6pbUZU97eO/4L0",
	"/SeYJXxSkmnO4rJsMNjHsteUAVAP1X9AzB9zp2ZoT3ZotJxU7glvjjo3ENuuSacNC95Sfd+gc+SHmnNK",
	"qyOPnfz+s2DTskho95b+cGx4sBWh10G/HH5xvUb18t0X6uYwqQZ5PTCwdnIavoA2dPnM/WfuP3P/qbnv",
	"cdun/plc33P4BM87ET5T/edRnVYuNTSLkyhEjrvthxViGriwntb5wyBEd8Iu5jU15k5pjmZWr+B5Qjx/",
	"HXzf10F3GgwOjaF1SX9saLgVxoIGPqcWzVBM4hiTHMfj9xGZpeksmvxGCCHDkCckI9OGYNkW8tOYjHGe",
	"lNmYjGlcJOPjY5zncY1KpavGN6cWsBUVDJ10fO+nznnDiQ9U6MG+e7O1Ow4Y1Xybf5TH42QKKY5SSnFK",
	"EoKncVRiBiWN4wlNcu4of978eNwY8Afmx9H4aMPdl0iuqgJ0Q+pd8OewqBP4GoFcVY4B+ww4FMI2qHy8",
	"VY/78vLah14otQQqj4h4iC3c5Xvk+JBuhzsPtvwIHs6lkKU6XrpcBoWmkgcS7oLLP64CF3wgVdBuui6C",
	"4LUK5MqaX9DB8UsqPy1VgIPLdjY4VYdK99bf2o0uyAVpKy9pLdAMJRfkIkbNEmHRNHfkk7lWW7zuK3Ll",
	"4PRKA7Xwvjcg2kxfKn7/A1eyx6No029Wi1F/O/yQ5b3cqLtC3i50H9fxt77bXew5et7CdrtG/T7F8TmR",
	"+pvSZoDRW+O9Zgy6cU96bR+tBd+M/J3PMBCut4V41T9I1lTTCixo586Hd8dVIHhgVeDwcR90OSecoAMl",
	"CpGklQN4w7h+28MOivxxffNzAdmrzv8Mkd3t/5PBsbuCOAnF68M5578Pw31VniH4QyF4eHT0j0hH8oAV",
	"cwBI/8/Dm82/AQAA///S9VvyxxwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
