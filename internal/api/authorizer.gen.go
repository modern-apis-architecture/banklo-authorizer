// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// GenericError defines model for generic-error.
type GenericError struct {
	Code        *string `json:"code,omitempty"`
	Description *string `json:"description,omitempty"`
}

// RequestCancellation defines model for request-cancellation.
type RequestCancellation struct {
	AcquirerCode      *string `json:"acquirer_code,omitempty"`
	AuthorizationCode *string `json:"authorization_code,omitempty"`
	CountryCode       *string `json:"country_code,omitempty"`
	CurrencyCode      *string `json:"currency_code,omitempty"`
	MerchantCode      *string `json:"merchant_code,omitempty"`
	PosId             *string `json:"pos_id,omitempty"`
	ProductId         *string `json:"product_id,omitempty"`
	TransactionData   *struct {
		TransactionId   *string `json:"transaction_id,omitempty"`
		TransactionType *string `json:"transaction_type,omitempty"`
	} `json:"transaction_data,omitempty"`
}

// RequestReversal defines model for request-reversal.
type RequestReversal struct {
	AcquirerCode      *string `json:"acquirer_code,omitempty"`
	AuthorizationCode *string `json:"authorization_code,omitempty"`
	CountryCode       *string `json:"country_code,omitempty"`
	CurrencyCode      *string `json:"currency_code,omitempty"`
	MerchantCode      *string `json:"merchant_code,omitempty"`
	PosId             *string `json:"pos_id,omitempty"`
	ProductId         *string `json:"product_id,omitempty"`
	TransactionData   *struct {
		TransactionId   *string `json:"transaction_id,omitempty"`
		TransactionType *string `json:"transaction_type,omitempty"`
	} `json:"transaction_data,omitempty"`
}

// RequestTransaction defines model for request-transaction.
type RequestTransaction struct {
	AcquirerCode      *string `json:"acquirer_code,omitempty"`
	AuthorizationCode *string `json:"authorization_code,omitempty"`
	CountryCode       *string `json:"country_code,omitempty"`
	CurrencyCode      *string `json:"currency_code,omitempty"`
	MerchantCode      *string `json:"merchant_code,omitempty"`
	PosId             *string `json:"pos_id,omitempty"`
	ProductId         *string `json:"product_id,omitempty"`
	TransactionData   *struct {
		Amount          *int32  `json:"amount,omitempty"`
		TransactionType *string `json:"transaction_type,omitempty"`
		WithPassword    *bool   `json:"with_password,omitempty"`
	} `json:"transaction_data,omitempty"`
}

// ResponseTransactions defines model for response-transactions.
type ResponseTransactions struct {
	RegisteredAt  *time.Time `json:"registered_at,omitempty"`
	TransactionId *string    `json:"transaction_id,omitempty"`
}

// N201Success defines model for 201-success.
type N201Success = ResponseTransactions

// N400BadRequest defines model for 400-bad-request.
type N400BadRequest = GenericError

// N401Unauthorized defines model for 401-unauthorized.
type N401Unauthorized = GenericError

// N403Forbidden defines model for 403-forbidden.
type N403Forbidden = GenericError

// N500Unavailable defines model for 500-unavailable.
type N500Unavailable = GenericError

// CreateTransactionJSONBody defines parameters for CreateTransaction.
type CreateTransactionJSONBody = RequestTransaction

// RequestCancellationJSONBody defines parameters for RequestCancellation.
type RequestCancellationJSONBody = RequestCancellation

// RequestReversalJSONBody defines parameters for RequestReversal.
type RequestReversalJSONBody = RequestReversal

// CreateTransactionJSONRequestBody defines body for CreateTransaction for application/json ContentType.
type CreateTransactionJSONRequestBody = CreateTransactionJSONBody

// RequestCancellationJSONRequestBody defines body for RequestCancellation for application/json ContentType.
type RequestCancellationJSONRequestBody = RequestCancellationJSONBody

// RequestReversalJSONRequestBody defines body for RequestReversal for application/json ContentType.
type RequestReversalJSONRequestBody = RequestReversalJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /transactions)
	CreateTransaction(ctx echo.Context) error

	// (POST /transactions/{id}/cancellation)
	RequestCancellation(ctx echo.Context, id string) error

	// (POST /transactions/{id}/reversal)
	RequestReversal(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateTransaction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateTransaction(ctx)
	return err
}

// RequestCancellation converts echo context to params.
func (w *ServerInterfaceWrapper) RequestCancellation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestCancellation(ctx, id)
	return err
}

// RequestReversal converts echo context to params.
func (w *ServerInterfaceWrapper) RequestReversal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RequestReversal(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/transactions", wrapper.CreateTransaction)
	router.POST(baseURL+"/transactions/:id/cancellation", wrapper.RequestCancellation)
	router.POST(baseURL+"/transactions/:id/reversal", wrapper.RequestReversal)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYT3PbthP9Kvztr7cSFkiKpMSbk0Mnt44nt07GAwJLGakEMAAUV9Xou3dAShZB0Y4n",
	"47qd1DeJ2D/AvvdA7u6B602rFSpnodqDQdtqZbH7k9KE2C3naLu/XCuHyvmfrG3XkjMntZp9tlr5Z5bf",
	"4Yb5Xz8ZbKCC/8/OsWf9qp2dEhBnmLKM+xAWDodDDAItN7L1T6ACOMQwp5TUTBCDX7Zo3YttYoUKjeQE",
	"jdHm8eQJ2Sq2dXfayD9RvHb2jDTa1FIIVK+bOqfUH/wrk2tWr/E1kx/iY6yOcKFDtQf8g23a044EQgWU",
	"JjAO05lHG7SWrdAfqDW6ReMk2rPnHtyu9RGsM1KtYLyZi/VDDE46nxxutHbRx12LUaNNFO4yPvnp+jNy",
	"5+Me2Us4UxzXa3ZKMDgN41+20qC5PR6rLotyyRaUUE5TkiQoyKKkDSmzYlkU6SKnyCCGEzm7kIHvskxD",
	"XyS0FsuGiaygRQkxcL1VzuxOXu9urv3DrTGo+C6IVdMwVpIR2swxQeRF3tV/g4bfMeXC7bNF6EZJkrGU",
	"UpEvaebdWm1vpYAKWJrmKMq5t896e4Y0IUVGecLmddrUHDocxZa73qffWs7DHAWhdbmgybwsEi48Gudr",
	"5lYw15F0+GyQv6Zh/ozwTCwauix52jSjWEeUA0wPF1wb4TpBuikIJ8xCtKYMQuQmLEYgTVic8JhaGpR+",
	"YnmqymElxjX/RpB+cVKEobweleWk6p5Qp8GvaCxbvynzx1DmA55vqvwXqvIBnScUOcj8Jsp/UJRs488O",
	"VZol0+9Ag0I6iOFeurvblll7r42AypktvonvcfGd6rqHRpsNc1CBVC5Lz5qQyuEKzTNleAHAg0Wt9RqZ",
	"+i6lDlU4Kdapfi6Uq8GVtA4NitvulClNU0JLkuYfE1rN51Wy+JlSSkf8O3Kd0oIuO94WPW+XKc1JmTVF",
	"TnOW1ll++Y0/yjiosGAOiZMbPB9mGrNJWJ+o1lQZLqt9iEGqRvvQYdNyHdWGKREpvI+uf/0QeSgjpaNj",
	"53UVRb/oSG2d/R+c9/COqd/XOiLR9VFU3tWn9ZdrHze5olfUn023qFgroYLsil55krXM3XXVmo2xa3Xf",
	"bPuSdir84KF4b5A5/Bjw4ciSd1rsXnBEcMm8rnJ+QRo8XS3xxbTiscgPdrPhSKMfMHzbZzyF6GcDz/Eb",
	"DRD6tv77HPPn7HTcuXd8ZSsL1W8QYPzJrwSwz/ZSHGbjFnWaCDd9Id6HX9YtM2yDDo1PN6b3IFUkReR0",
	"5Pmxix4CgxcGVB0pIQbFNt0FKGAMezxg0Vidn/5eQo6avf8UI4fTqFej47Ane5KKN+fPyR+fhoPO5o2C",
	"L0jB89KYNoN3nj1zxZ4JEg6zPx3+CgAA//9DCfwsVxcAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
